type User
  @model
  @key(fields: ["email"])
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }]) {
  email: String!
  name: String
  artistID: ID
  artist: Artist @connection(fields: ["artistID"])
  bands: [Band] @connection(keyName: "byUser", fields: ["email"])
  concerts: [Concert] @connection(keyName: "byUser", fields: ["email"])
  ordersByDate: [Order] @connection(keyName: "ByUserByDate", fields: ["email"])
  ordersByStatus: [Order]
    @connection(keyName: "ByUserbyStatusByDate", fields: ["email"])
}

type Concert
  @model
  @key(name: "byUser", fields: ["userName"], queryField: "concertsByUser")
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  userName: String!
  identityId: ID
  name: String!
  date: String!
  venue: String!
  genres: String!
  description: String!
  keyImage: String
  invitations: AWSJSON
  tickets: [Ticket] @connection(keyName: "byConcert", fields: ["id"])
  bands: [ConcertBandJoin] @connection(keyName: "byConcert", fields: ["id"])
  artists: [ConcertArtistJoin] @connection(keyName: "byConcert", fields: ["id"])
}

type Band
  @model
  @key(name: "byUser", fields: ["userName"], queryField: "bandsByUser")
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  userName: String!
  identityId: ID
  name: String!
  genre: String!
  description: String
  keyImage: String
  invitations: AWSJSON
  members: [ArtistBandJoin] @connection(keyName: "byBand", fields: ["id"])
  concerts: [ConcertBandJoin] @connection(keyName: "byBand", fields: ["id"])
}

type Artist
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  identityId: String
  name: String!
  description: String
  genre: [String!]
  role: [String!]
  bands: [ArtistBandJoin] @connection(keyName: "byArtist", fields: ["id"])
}

type ArtistBandJoin
  @model(queries: null)
  @key(name: "byBand", fields: ["bandID", "artistID"])
  @key(name: "byArtist", fields: ["artistID", "bandID"])
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  bandID: ID!
  artistID: ID!
  band: Band! @connection(fields: ["bandID"])
  artist: Artist! @connection(fields: ["artistID"])
}

type ConcertBandJoin
  @model(queries: null)
  @key(name: "byConcert", fields: ["concertID", "bandID"])
  @key(name: "byBand", fields: ["bandID", "concertID"])
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  concertID: ID!
  bandID: ID!
  concert: Concert! @connection(fields: ["concertID"])
  band: Band! @connection(fields: ["bandID"])
}

type ConcertArtistJoin
  @model(queries: null)
  @key(name: "byConcert", fields: ["concertID", "artistID"])
  @key(name: "byArtist", fields: ["artistID", "concertID"])
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  concertID: ID!
  artistID: ID!
  concert: Concert! @connection(fields: ["concertID"])
  artist: Artist! @connection(fields: ["artistID"])
}

type Ticket
  @model
  @key(
    name: "byConcert"
    fields: ["concertID"]
    queryField: "ticketsByConcertID"
  )
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  eventName: String
  description: String
  price: Float!
  startDate: AWSDateTime! #the day when the sale begins
  endDate: AWSDateTime! # the day when the sale ends
  date: AWSDateTime!
  venue: String!
  type: String!
  quantity: Int!
  concertID: ID!
  concert: Concert @connection(fields: ["concertID"])
  orders: [TicketOrder] @connection(keyName: "byTicket", fields: ["id"])
}

type TicketOrder
  @model
  @key(name: "byTicket", fields: ["ticketID", "orderID"])
  @key(name: "byOrder", fields: ["orderID", "ticketID"])
  @auth(
    rules: [
      { allow: owner, ownerField: "userID" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  userID: ID!
  orderID: ID!
  ticketID: ID!
  fullName: String!
  event: String!
  type: String!
  date: AWSDateTime!
  price: Float!
  venue: String!
  ticket: Ticket @connection(fields: ["ticketID"])
  order: Order @connection(fields: ["orderID"])
}

type Order
  @model
  @key(
    name: "ByUserByDate"
    fields: ["userName", "createdAt"]
    queryField: "ordersByUserByDate"
  )
  @key(
    name: "ByUserbyStatusByDate"
    fields: ["userName", "status", "createdAt"]
  )
  @auth(
    rules: [
      { allow: owner, ownerField: "userID" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  customer: String
  userName: String!
  status: String!
  stripeIntentID: String
  total: Float
  createdAt: String!
  tickets: [TicketOrder] @connection(keyName: "byOrder", fields: ["id"])
}

type Invitation
  @model
  @key(fields: ["email", "createdAt"])
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  email: String!
  message: String
  authorID: ID
  authorEmail: String
  senderTable: String
  senderTableElementID: ID
  senderTableElementName: String
  status: String
  createdAt: AWSDateTime!
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input TicketItem {
  id: ID!
  quantity: Int!
}

input ProcessOrderInput {
  userName: String!
  fullName: String!
  tickets: [TicketItem]
}

input ProcessPaymentInput {
  paymentIntentID: String!
  orderID: ID!
}

type Subscription {
  onCreateInvitationByEmail(email: String!): Invitation
    @aws_subscribe(mutations: ["createInvitation"])
}

type Mutation {
  acceptInvitation(
    bandID: ID
    artistID: ID
    invitationEmail: String
    invitationCreatedAt: String
  ): String @function(name: "acceptInvitation-${env}")

  rejectInvitation(
    bandID: ID
    invitationEmail: String
    invitationCreatedAt: String
  ): String @function(name: "rejectInvitation-${env}")

  acceptConcertInvitation(
    concertID: ID
    bandID: ID
    invitationEmail: String
    invitationCreatedAt: String
  ): String @function(name: "acceptConcertInvitation-${env}")

  rejectConcertInvitation(
    concertID: ID
    invitationEmail: String
    invitationCreatedAt: String
  ): String @function(name: "rejectConcertInvitation-${env}")

  processOrder(input: ProcessOrderInput!): String
    @function(name: "createOrder-${env}")

  processPayment(input: ProcessPaymentInput!): String
    @function(name: "processPayment-${env}")

  delteAccount(userName: String, email: String): String
    @function(name: "delteAccount-${env}")
}
